import { parseCSV, fetchJSON } from './utils';

import * as L from 'leaflet';
import * as d3 from 'd3-voronoi';
import { VoronoiLayout } from 'd3-voronoi';

// constants
const dataset = 'bike';
const dataset_metro = 'dataset/rio_metro.csv';
const dataset_bike = 'https://riodejaneiro.publicbikesystem.net/customer/ube/gbfs/v1/en/station_information';
const map_position = [-22.9668, -43.2029]; // Rio de Janeiro South Zone

// globals
let map: L.Map;                    // leaflet map
let layer_stations: L.LayerGroup;  // layer containing stations
let stations: any = [];            // list of stations containing lat and lng coordinates
let constraints: any = {};         // an outer polygon and a list of inner polygons
let clicked: any = [];             // list of clicked points
let dragStart: any;                // used to update station position when dragging
let voronoiPolygons: any = [];     // polygons generated by d3-voronoi
let voronoiLayout: VoronoiLayout<[number, number]>; // d3-voronoi layout


/****** LOAD DATA ******/

// load data from a local csv and call the callback with the data
function loadCSV(path, callback) {
  parseCSV(path).then(callback).catch(e => console.log('Error:', e));
}

function loadJSON(path, callback) {
  fetchJSON(path).then(callback).catch(e => console.log('Error:', e));
}

// load data from a remote json and call the callback with the data
async function loadRemoteJSON(url, callback) {
  try {
    const json = await fetchJSON(url);
    callback(json['data']['stations']);
  } catch (error) {
    console.log('Error:', error);
  }
}

// load stations data from csv or json
function loadStations(dataset) {
  let callback = (data) => {
    console.log('Loaded data:', data);
    data.forEach((station) => {
      stations.push({
        name: station['name'],
        lat: station['lat'],
        lng: station['lon'] != null ? station['lon'] : station['lng']
      });
    });
    voronoi();
    redraw();
  }
  if (dataset === 'metro') {
    loadCSV(dataset_metro, callback);
  } else if (dataset === 'bike') {
    loadRemoteJSON(dataset_bike, callback);
  }
}

function loadConstraints() {
  let callback = (data) => {
    constraints = data;
    redraw();
  }
  loadJSON('dataset/rio_constraints.json', callback);
}


/****** MAP INIT AND DRAWING ******/

function init() {
  // leaflet
  map = L.map('map').setView(map_position, 15);
  map.on('click', onMapClick);
  layer_stations = L.layerGroup().addTo(map);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Â© OpenStreetMap contributors'
  }).addTo(map);

  // d3
  voronoiLayout = d3.voronoi();
}

// callback for map click: create station marker and redraw voronoi
function onMapClick(e) {
  stations.push(e.latlng);

  // hack to get the clicked points in json format
  // clicked.push(e.latlng);
  // console.log(clicked)
  // const jsonContent = JSON.stringify(clicked, null, 2);
  // console.log(jsonContent);

  voronoi();
  redraw();
}

// add a polygon to the map
function addPolygon(latLngs, color, fill) {
  L.polygon(latLngs, {color: color, fill: fill}).addTo(map);
}

// add a station point to the map
function addMarker(point) {
  const marker = L.marker([point.lat, point.lng], { draggable: true });
  marker.addTo(layer_stations);

  // started to drag: save marker position
  marker.on('dragstart', (e) => {
    dragStart = e.target.getLatLng();
  });

  // stoped to drag: update marker position and redraw voronoi
  marker.on('dragend', (e) => {
    const index = stations.findIndex(p => (p.lat == dragStart.lat) && (p.lng == dragStart.lng));
    stations[index] = e.target.getLatLng();
    voronoi();
    redraw();
  });
}

// redraw data on the map
function redraw() {
  // map cleanup
  layer_stations.clearLayers();

  // clear old polygons
  map.eachLayer((layer) => {
    if (layer instanceof L.Polygon) {
      map.removeLayer(layer);
    }
  });

  // draw voronoi polygons
  voronoiPolygons.forEach(polygon => {
    const latLngs = polygon.filter(point =>
        point !== null
      ).map(point =>
        L.latLng(point[0], point[1])
      );
    addPolygon(latLngs, 'blue', false);
  });

  // draw constraint polygons
  addPolygon(constraints['outter'], 'red', false);
  constraints.inner.forEach(polygon => { addPolygon(polygon, 'red', true); });

  // draw points
  stations.forEach(point => {
    addMarker(point);
  });
}


/****** GEOMETRIC CALCULATIONS ******/

// convert points pairs and calculate voronoi polygons
function voronoi() {
  const positions = stations.map(point => [point.lat, point.lng]);
  const voronoiDiagram = voronoiLayout(positions);
  voronoiPolygons = voronoiDiagram.polygons();
}


/****** MAIN ******/

init();
loadConstraints();
loadStations(dataset);

